import numpy as np

import tensorflow as tf
from keras.utils import to_categorical
from seqeval.metrics import classification_report, accuracy_score, f1_score, precision_score, recall_score
from data_management import file_utils
import gram_cnn as gram_cnn


def pred2label(pred, idx2tag):
    out = []
    for pred_i in pred:
        out_i = []
        for p in pred_i:
            if len(p) > 1:
                p_i = np.argmax(p)
                out_i.append(idx2tag[p_i].replace("<\s>", "O"))
            else:
                if p[0] in idx2tag:
                    out_i.append(idx2tag[p[0]])
                else:
                    out_i.append(0)
        out.append(out_i)
    return out

def main():
    training_path = '../data/NCBI_train_processed.pkl.gz'

    test_path = '../data/NCBI_test_processed.pkl.gz'

    test_vec_path = '../data/NCBI_test_wv.pkl.gz'

    print('Retrieving Training Data')
    training_data = file_utils.get_zipped_pkl_data(training_path)

    print('Retrieving Test Data')
    test_data = file_utils.get_zipped_pkl_data(test_path)

    print('Retrieving Vectorized Data')
    test_vectorized = file_utils.get_zipped_pkl_data(test_vec_path)

    max_len_sentences = training_data['max_sent']

    max_len_words = training_data['max_word']

    char_dict = training_data['char_dict']

    test_pos = test_data['pos']

    test_chars = test_data['char']

    test_tags = training_data['tags']

    test_enc = test_data['enc_tags']

    char_vocab = len(char_dict) + 1

    config = {'char_kernels': [1, 3, 5, 7, 10], 'char_filters': [200, 200, 150, 150, 100],
              'word_kernels': [1, 3, 5, 7, 10], 'word_filters': [50, 50, 50, 50, 50]}

    print('Building Model')
    model = gram_cnn.get_model(max_len_sentences, max_len_words, 200, config, test_tags, char_vocab)

    model.load_weights('../data/saved-model-361--0.84.hdf5')

    pred_y = model.predict([np.array(test_chars), np.array(test_vectorized), np.array(test_pos)], batch_size=1)

    idx2tag = {i: w for w, i in test_tags.items()}

    pred_labels = pred2label(pred_y, idx2tag)

    true_labels = pred2label(test_enc, idx2tag)

    print(classification_report(true_labels, pred_labels))

if __name__ == "__main__":
    main()